-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data : IN STD_LOGIC_VECTOR (1087 downto 0);
    output_r : OUT STD_LOGIC_VECTOR (255 downto 0);
    output_r_ap_vld : OUT STD_LOGIC;
    output_r_ap_ack : IN STD_LOGIC;
    last : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of keccak is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "keccak,hls_ip_2014_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx485tffg1761-2,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.390000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1600_lc_1 : STD_LOGIC_VECTOR (1599 downto
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_33F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111111";
    constant ap_const_lv32_340 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101000000";
    constant ap_const_lv32_37F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101111111";
    constant ap_const_lv32_380 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000000";
    constant ap_const_lv32_3BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111111";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv32_43F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000111111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_500 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100000000";
    constant ap_const_lv32_53F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010100111111";
    constant ap_const_lv32_540 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010101000000";
    constant ap_const_lv32_57F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010101111111";
    constant ap_const_lv32_440 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001000000";
    constant ap_const_lv32_47F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001111111";
    constant ap_const_lv32_580 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010110000000";
    constant ap_const_lv32_5BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010110111111";
    constant ap_const_lv32_480 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010000000";
    constant ap_const_lv32_4BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010111111";
    constant ap_const_lv32_5C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010111000000";
    constant ap_const_lv32_5FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010111111111";
    constant ap_const_lv32_4C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010011000000";
    constant ap_const_lv32_4FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010011111111";
    constant ap_const_lv32_600 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011000000000";
    constant ap_const_lv32_63F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011000111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal state : STD_LOGIC_VECTOR (1599 downto
    signal KeccakRoundConstants_U_ap_dummy_clk : STD_LOGIC;
    signal KeccakRoundConstants_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal KeccakRoundConstants_ce0 : STD_LOGIC;
    signal KeccakRoundConstants_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_792_p5 : STD_LOGIC_VECTOR (1599 downto 0);
    signal round_1_fu_816_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_fu_1936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_ioackin_output_r_ap_ack : STD_LOGIC;
    signal tmp_state_2_fu_1918_p5 : STD_LOGIC_VECTOR (1599 downto 0);
    signal tmp_state_1_chi_fu_315_A_read : STD_LOGIC_VECTOR (1599 downto 0);
    signal tmp_state_1_chi_fu_315_ap_return : STD_LOGIC_VECTOR (1599 downto 0);
    signal state_load_1_reg_289 : STD_LOGIC_VECTOR (1599 downto 0);
    signal round_reg_301 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i9_fu_1903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_output_r_ap_ack : STD_LOGIC := '0';
    signal tmp_2_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_348_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_338_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_374_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_364_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_400_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_390_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_426_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_416_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_452_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_442_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_478_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_468_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_504_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_494_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_530_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_520_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_556_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_546_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_582_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_572_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_608_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_598_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_634_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_624_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_660_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_650_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_686_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_676_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_712_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_31_fu_702_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_738_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_728_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_337_fu_748_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_336_fu_722_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_335_fu_696_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_334_fu_670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_333_fu_644_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_332_fu_618_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_331_fu_592_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_330_fu_566_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_329_fu_540_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_328_fu_514_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_327_fu_488_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_326_fu_462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_325_fu_436_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_324_fu_410_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_323_fu_384_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_322_fu_358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_332_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_754_p18 : STD_LOGIC_VECTOR (1087 downto 0);
    signal tmp_111_i_fu_836_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_i_fu_846_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_110_i_fu_826_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_i_fu_856_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp4_fu_872_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp3_fu_878_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_866_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_i_fu_910_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_118_i_fu_920_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_116_i_fu_900_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_119_i_fu_930_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp9_fu_946_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_i_fu_890_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp8_fu_952_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp7_fu_940_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_123_i_fu_984_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_124_i_fu_994_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_122_i_fu_974_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_i_fu_1004_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_fu_1020_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_121_i_fu_964_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp5_fu_1026_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_1014_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_i_fu_1058_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_i_fu_1068_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_i_fu_1048_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_131_i_fu_1078_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp10_fu_1094_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_127_i_fu_1038_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp11_fu_1100_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp6_fu_1088_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_135_i_fu_1132_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_136_i_fu_1142_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_i_fu_1122_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_137_i_fu_1152_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp13_fu_1168_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_i_fu_1112_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp14_fu_1174_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp12_fu_1162_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_1_i_fu_958_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_1186_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_39_fu_1190_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_4_i_fu_1180_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_i_fu_1198_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_2_i_fu_1032_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_fu_1212_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_41_fu_1216_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_fu_884_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_1_i_fu_1224_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_3_i_fu_1106_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_1238_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_43_fu_1242_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_2_i_fu_1250_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_1264_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_45_fu_1268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_3_i_fu_1276_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_1290_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_47_fu_1294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_4_i_fu_1302_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_i_fu_1206_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_1_i_fu_1232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_2_i_fu_1258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_3_i_fu_1284_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_4_i_fu_1310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_0_1_i_fu_1322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_0_2_i_fu_1328_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_0_3_i_fu_1334_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_0_4_i_fu_1340_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_1_i_fu_1346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_1_1_i_fu_1352_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_1_2_i_fu_1358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_1_3_i_fu_1364_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_1_4_i_fu_1370_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_2_i_fu_1376_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_2_1_i_fu_1382_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_2_2_i_fu_1388_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_2_3_i_fu_1394_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_2_4_i_fu_1400_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_3_i_fu_1406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_3_1_i_fu_1412_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_3_2_i_fu_1418_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_3_3_i_fu_1424_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_3_4_i_fu_1430_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_4_i_fu_1436_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_4_1_i_fu_1442_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_4_2_i_fu_1448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_4_3_i_fu_1454_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_4_4_i_fu_1460_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_fu_1576_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_39_1_4_i_fu_1580_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_50_fu_1494_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_39_0_3_i_fu_1498_p4 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_70_fu_1758_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_39_4_2_i_fu_1762_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_64_fu_1674_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_39_3_1_i_fu_1678_p4 : STD_LOGIC_VECTOR (54 downto 0);
    signal tmp_58_fu_1590_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_2_i_fu_1594_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_67_fu_1716_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_3_4_i_fu_1720_p4 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_61_fu_1632_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_39_2_3_i_fu_1636_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_55_fu_1548_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_39_1_2_i_fu_1552_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_fu_1466_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_39_0_1_i_fu_1470_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_68_fu_1730_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_39_4_i_fu_1734_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_51_fu_1508_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_39_0_4_i_fu_1512_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_71_fu_1772_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_39_4_3_i_fu_1776_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_1688_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_39_3_2_i_fu_1692_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_59_fu_1604_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_39_2_1_i_fu_1608_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_52_fu_1522_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_53_fu_1526_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_1646_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_2_4_i_fu_1650_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_56_fu_1562_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_39_1_3_i_fu_1566_p4 : STD_LOGIC_VECTOR (44 downto 0);
    signal tmp_49_fu_1480_p1 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_39_0_2_i_fu_1484_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_69_fu_1744_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_39_4_1_i_fu_1748_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_63_fu_1660_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_39_3_i_fu_1664_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_72_fu_1786_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal tmp_39_4_4_i_fu_1790_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_66_fu_1702_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_39_3_3_i_fu_1706_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_60_fu_1618_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_39_2_2_i_fu_1622_p4 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_54_fu_1534_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_39_1_1_i_fu_1538_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_30_0_i_fu_1316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_fu_1908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_1912_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_not_fu_1930_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_82 : BOOLEAN;

    component chi IS
    port (
        A_read : IN STD_LOGIC_VECTOR (1599 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (1599 downto 0) );
    end component;


    component keccak_KeccakRoundConstants IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    KeccakRoundConstants_U : component keccak_KeccakRoundConstants
    generic map (
        DataWidth => 64,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => KeccakRoundConstants_U_ap_dummy_clk,
        reset => ap_rst,
        address0 => KeccakRoundConstants_address0,
        ce0 => KeccakRoundConstants_ce0,
        q0 => KeccakRoundConstants_q0);

    tmp_state_1_chi_fu_315 : component chi
    port map (
        A_read => tmp_state_1_chi_fu_315_A_read,
        ap_return => tmp_state_1_chi_fu_315_ap_return);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_output_r_ap_ack assign process. --
    ap_reg_ioackin_output_r_ap_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_output_r_ap_ack <= ap_const_logic_0;
            else
                if (ap_sig_bdd_82) then
                    if (not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack)))) then 
                        ap_reg_ioackin_output_r_ap_ack <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = output_r_ap_ack)) then 
                        ap_reg_ioackin_output_r_ap_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- round_reg_301 assign process. --
    round_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack)))) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond3_fu_810_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = demorgan_fu_1936_p2) and not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack)))))) then 
                round_reg_301 <= round_1_fu_816_p2;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                round_reg_301 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- state_load_1_reg_289 assign process. --
    state_load_1_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond3_fu_810_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = demorgan_fu_1936_p2) and not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack))))) then 
                state_load_1_reg_289 <= tmp_state_2_fu_1918_p5;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack))))) then 
                state_load_1_reg_289 <= ap_const_lv1600_lc_1;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                state_load_1_reg_289 <= tmp_36_fu_792_p5;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack))))) then
                state <= state_load_1_reg_289;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond3_fu_810_p2 , demorgan_fu_1936_p2 , ap_sig_ioackin_output_r_ap_ack)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack))) and not((exitcond3_fu_810_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond3_fu_810_p2 = ap_const_lv1_0) and not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    KeccakRoundConstants_U_ap_dummy_clk <= ap_const_logic_1;
    KeccakRoundConstants_address0 <= tmp_i9_fu_1903_p1(5 - 1 downto 0);

    -- KeccakRoundConstants_ce0 assign process. --
    KeccakRoundConstants_ce0_assign_proc : process(ap_CS_fsm, exitcond3_fu_810_p2, demorgan_fu_1936_p2, ap_sig_ioackin_output_r_ap_ack)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack))))) then 
            KeccakRoundConstants_ce0 <= ap_const_logic_1;
        else 
            KeccakRoundConstants_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, exitcond3_fu_810_p2, demorgan_fu_1936_p2, ap_sig_ioackin_output_r_ap_ack)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack))) and not((exitcond3_fu_810_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond3_fu_810_p2, demorgan_fu_1936_p2, ap_sig_ioackin_output_r_ap_ack)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(((exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_sig_ioackin_output_r_ap_ack))) and not((exitcond3_fu_810_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_82 assign process. --
    ap_sig_bdd_82_assign_proc : process(ap_CS_fsm, exitcond3_fu_810_p2, demorgan_fu_1936_p2)
    begin
                ap_sig_bdd_82 <= ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)));
    end process;


    -- ap_sig_ioackin_output_r_ap_ack assign process. --
    ap_sig_ioackin_output_r_ap_ack_assign_proc : process(output_r_ap_ack, ap_reg_ioackin_output_r_ap_ack)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_output_r_ap_ack)) then 
            ap_sig_ioackin_output_r_ap_ack <= output_r_ap_ack;
        else 
            ap_sig_ioackin_output_r_ap_ack <= ap_const_logic_1;
        end if; 
    end process;

    demorgan_fu_1936_p2 <= (p_not_fu_1930_p2 and last);
    exitcond3_fu_810_p2 <= "1" when (round_reg_301 = ap_const_lv5_18) else "0";
    output_r <= tmp_state_2_fu_1918_p5(256 - 1 downto 0);

    -- output_r_ap_vld assign process. --
    output_r_ap_vld_assign_proc : process(ap_CS_fsm, exitcond3_fu_810_p2, demorgan_fu_1936_p2, ap_reg_ioackin_output_r_ap_ack)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond3_fu_810_p2 = ap_const_lv1_0) and not((ap_const_lv1_0 = demorgan_fu_1936_p2)) and (ap_const_logic_0 = ap_reg_ioackin_output_r_ap_ack))) then 
            output_r_ap_vld <= ap_const_logic_1;
        else 
            output_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_not_fu_1930_p2 <= "1" when (round_reg_301 = ap_const_lv5_17) else "0";
    round_1_fu_816_p2 <= std_logic_vector(unsigned(round_reg_301) + unsigned(ap_const_lv5_1));
    tmp10_fu_1094_p2 <= (tmp_128_i_fu_1048_p4 xor tmp_131_i_fu_1078_p4);
    tmp11_fu_1100_p2 <= (tmp10_fu_1094_p2 xor tmp_127_i_fu_1038_p4);
    tmp12_fu_1162_p2 <= (tmp_135_i_fu_1132_p4 xor tmp_136_i_fu_1142_p4);
    tmp13_fu_1168_p2 <= (tmp_134_i_fu_1122_p4 xor tmp_137_i_fu_1152_p4);
    tmp14_fu_1174_p2 <= (tmp13_fu_1168_p2 xor tmp_133_i_fu_1112_p4);
    tmp1_fu_1020_p2 <= (tmp_122_i_fu_974_p4 xor tmp_125_i_fu_1004_p4);
    tmp2_fu_866_p2 <= (tmp_111_i_fu_836_p4 xor tmp_112_i_fu_846_p4);
    tmp3_fu_878_p2 <= (tmp4_fu_872_p2 xor tmp_37_fu_822_p1);
    tmp4_fu_872_p2 <= (tmp_110_i_fu_826_p4 xor tmp_113_i_fu_856_p4);
    tmp5_fu_1026_p2 <= (tmp1_fu_1020_p2 xor tmp_121_i_fu_964_p4);
    tmp6_fu_1088_p2 <= (tmp_129_i_fu_1058_p4 xor tmp_130_i_fu_1068_p4);
    tmp7_fu_940_p2 <= (tmp_117_i_fu_910_p4 xor tmp_118_i_fu_920_p4);
    tmp8_fu_952_p2 <= (tmp9_fu_946_p2 xor tmp_115_i_fu_890_p4);
    tmp9_fu_946_p2 <= (tmp_116_i_fu_900_p4 xor tmp_119_i_fu_930_p4);
    tmp_10_332_fu_618_p2 <= (tmp_24_fu_608_p4 xor tmp_23_fu_598_p4);
    tmp_10_fu_426_p4 <= state(319 downto 256);
    tmp_110_i_fu_826_p4 <= state_load_1_reg_289(383 downto 320);
    tmp_111_i_fu_836_p4 <= state_load_1_reg_289(703 downto 640);
    tmp_112_i_fu_846_p4 <= state_load_1_reg_289(1023 downto 960);
    tmp_113_i_fu_856_p4 <= state_load_1_reg_289(1343 downto 1280);
    tmp_115_i_fu_890_p4 <= state_load_1_reg_289(127 downto 64);
    tmp_116_i_fu_900_p4 <= state_load_1_reg_289(447 downto 384);
    tmp_117_i_fu_910_p4 <= state_load_1_reg_289(767 downto 704);
    tmp_118_i_fu_920_p4 <= state_load_1_reg_289(1087 downto 1024);
    tmp_119_i_fu_930_p4 <= state_load_1_reg_289(1407 downto 1344);
    tmp_11_333_fu_644_p2 <= (tmp_26_fu_634_p4 xor tmp_25_fu_624_p4);
    tmp_11_fu_442_p4 <= data(383 downto 320);
    tmp_121_i_fu_964_p4 <= state_load_1_reg_289(191 downto 128);
    tmp_122_i_fu_974_p4 <= state_load_1_reg_289(511 downto 448);
    tmp_123_i_fu_984_p4 <= state_load_1_reg_289(831 downto 768);
    tmp_124_i_fu_994_p4 <= state_load_1_reg_289(1151 downto 1088);
    tmp_125_i_fu_1004_p4 <= state_load_1_reg_289(1471 downto 1408);
    tmp_127_i_fu_1038_p4 <= state_load_1_reg_289(255 downto 192);
    tmp_128_i_fu_1048_p4 <= state_load_1_reg_289(575 downto 512);
    tmp_129_i_fu_1058_p4 <= state_load_1_reg_289(895 downto 832);
    tmp_12_1_i_fu_958_p2 <= (tmp8_fu_952_p2 xor tmp7_fu_940_p2);
    tmp_12_2_i_fu_1032_p2 <= (tmp5_fu_1026_p2 xor tmp_fu_1014_p2);
    tmp_12_334_fu_670_p2 <= (tmp_28_fu_660_p4 xor tmp_27_fu_650_p4);
    tmp_12_3_i_fu_1106_p2 <= (tmp11_fu_1100_p2 xor tmp6_fu_1088_p2);
    tmp_12_4_i_fu_1180_p2 <= (tmp14_fu_1174_p2 xor tmp12_fu_1162_p2);
    tmp_12_fu_452_p4 <= state(383 downto 320);
    tmp_12_i_fu_884_p2 <= (tmp3_fu_878_p2 xor tmp2_fu_866_p2);
    tmp_130_i_fu_1068_p4 <= state_load_1_reg_289(1215 downto 1152);
    tmp_131_i_fu_1078_p4 <= state_load_1_reg_289(1535 downto 1472);
    tmp_133_i_fu_1112_p4 <= state_load_1_reg_289(319 downto 256);
    tmp_134_i_fu_1122_p4 <= state_load_1_reg_289(639 downto 576);
    tmp_135_i_fu_1132_p4 <= state_load_1_reg_289(959 downto 896);
    tmp_136_i_fu_1142_p4 <= state_load_1_reg_289(1279 downto 1216);
    tmp_137_i_fu_1152_p4 <= state_load_1_reg_289(1599 downto 1536);
    tmp_13_335_fu_696_p2 <= (tmp_30_fu_686_p4 xor tmp_29_fu_676_p4);
    tmp_13_fu_468_p4 <= data(447 downto 384);
    tmp_14_336_fu_722_p2 <= (tmp_32_fu_712_p4 xor tmp_31_fu_702_p4);
    tmp_14_fu_478_p4 <= state(447 downto 384);
    tmp_15_337_fu_748_p2 <= (tmp_34_fu_738_p4 xor tmp_33_fu_728_p4);
    tmp_15_fu_494_p4 <= data(511 downto 448);
    tmp_16_fu_504_p4 <= state(511 downto 448);
    tmp_17_fu_520_p4 <= data(575 downto 512);
    tmp_18_1_i_fu_1224_p3 <= (tmp_40_fu_1212_p1 & tmp_41_fu_1216_p3);
    tmp_18_2_i_fu_1250_p3 <= (tmp_42_fu_1238_p1 & tmp_43_fu_1242_p3);
    tmp_18_3_i_fu_1276_p3 <= (tmp_44_fu_1264_p1 & tmp_45_fu_1268_p3);
    tmp_18_4_i_fu_1302_p3 <= (tmp_46_fu_1290_p1 & tmp_47_fu_1294_p3);
    tmp_18_fu_530_p4 <= state(575 downto 512);
    tmp_18_i_fu_1198_p3 <= (tmp_38_fu_1186_p1 & tmp_39_fu_1190_p3);
    tmp_19_fu_546_p4 <= data(639 downto 576);
    tmp_1_322_fu_358_p2 <= (tmp_5_fu_348_p4 xor tmp_4_fu_338_p4);
    tmp_1_fu_320_p1 <= data(64 - 1 downto 0);
    tmp_20_fu_556_p4 <= state(639 downto 576);
    tmp_21_fu_572_p4 <= data(703 downto 640);
    tmp_22_1_i_fu_1232_p2 <= (tmp_12_i_fu_884_p2 xor tmp_18_1_i_fu_1224_p3);
    tmp_22_2_i_fu_1258_p2 <= (tmp_12_1_i_fu_958_p2 xor tmp_18_2_i_fu_1250_p3);
    tmp_22_3_i_fu_1284_p2 <= (tmp_12_2_i_fu_1032_p2 xor tmp_18_3_i_fu_1276_p3);
    tmp_22_4_i_fu_1310_p2 <= (tmp_12_3_i_fu_1106_p2 xor tmp_18_4_i_fu_1302_p3);
    tmp_22_fu_582_p4 <= state(703 downto 640);
    tmp_22_i_fu_1206_p2 <= (tmp_12_4_i_fu_1180_p2 xor tmp_18_i_fu_1198_p3);
    tmp_23_fu_598_p4 <= data(767 downto 704);
    tmp_24_fu_608_p4 <= state(767 downto 704);
    tmp_25_fu_624_p4 <= data(831 downto 768);
    tmp_26_fu_634_p4 <= state(831 downto 768);
    tmp_27_fu_650_p4 <= data(895 downto 832);
    tmp_28_fu_660_p4 <= state(895 downto 832);
    tmp_29_fu_676_p4 <= data(959 downto 896);
    tmp_2_323_fu_384_p2 <= (tmp_8_fu_374_p4 xor tmp_7_fu_364_p4);
    tmp_2_fu_328_p1 <= state(64 - 1 downto 0);
    tmp_30_0_1_i_fu_1322_p2 <= (tmp_22_i_fu_1206_p2 xor tmp_110_i_fu_826_p4);
    tmp_30_0_2_i_fu_1328_p2 <= (tmp_22_i_fu_1206_p2 xor tmp_111_i_fu_836_p4);
    tmp_30_0_3_i_fu_1334_p2 <= (tmp_22_i_fu_1206_p2 xor tmp_112_i_fu_846_p4);
    tmp_30_0_4_i_fu_1340_p2 <= (tmp_22_i_fu_1206_p2 xor tmp_113_i_fu_856_p4);
    tmp_30_0_i_fu_1316_p2 <= (tmp_22_i_fu_1206_p2 xor tmp_37_fu_822_p1);
    tmp_30_1_1_i_fu_1352_p2 <= (tmp_22_1_i_fu_1232_p2 xor tmp_116_i_fu_900_p4);
    tmp_30_1_2_i_fu_1358_p2 <= (tmp_22_1_i_fu_1232_p2 xor tmp_117_i_fu_910_p4);
    tmp_30_1_3_i_fu_1364_p2 <= (tmp_22_1_i_fu_1232_p2 xor tmp_118_i_fu_920_p4);
    tmp_30_1_4_i_fu_1370_p2 <= (tmp_22_1_i_fu_1232_p2 xor tmp_119_i_fu_930_p4);
    tmp_30_1_i_fu_1346_p2 <= (tmp_22_1_i_fu_1232_p2 xor tmp_115_i_fu_890_p4);
    tmp_30_2_1_i_fu_1382_p2 <= (tmp_22_2_i_fu_1258_p2 xor tmp_122_i_fu_974_p4);
    tmp_30_2_2_i_fu_1388_p2 <= (tmp_22_2_i_fu_1258_p2 xor tmp_123_i_fu_984_p4);
    tmp_30_2_3_i_fu_1394_p2 <= (tmp_22_2_i_fu_1258_p2 xor tmp_124_i_fu_994_p4);
    tmp_30_2_4_i_fu_1400_p2 <= (tmp_22_2_i_fu_1258_p2 xor tmp_125_i_fu_1004_p4);
    tmp_30_2_i_fu_1376_p2 <= (tmp_22_2_i_fu_1258_p2 xor tmp_121_i_fu_964_p4);
    tmp_30_3_1_i_fu_1412_p2 <= (tmp_22_3_i_fu_1284_p2 xor tmp_128_i_fu_1048_p4);
    tmp_30_3_2_i_fu_1418_p2 <= (tmp_22_3_i_fu_1284_p2 xor tmp_129_i_fu_1058_p4);
    tmp_30_3_3_i_fu_1424_p2 <= (tmp_22_3_i_fu_1284_p2 xor tmp_130_i_fu_1068_p4);
    tmp_30_3_4_i_fu_1430_p2 <= (tmp_22_3_i_fu_1284_p2 xor tmp_131_i_fu_1078_p4);
    tmp_30_3_i_fu_1406_p2 <= (tmp_22_3_i_fu_1284_p2 xor tmp_127_i_fu_1038_p4);
    tmp_30_4_1_i_fu_1442_p2 <= (tmp_22_4_i_fu_1310_p2 xor tmp_134_i_fu_1122_p4);
    tmp_30_4_2_i_fu_1448_p2 <= (tmp_22_4_i_fu_1310_p2 xor tmp_135_i_fu_1132_p4);
    tmp_30_4_3_i_fu_1454_p2 <= (tmp_22_4_i_fu_1310_p2 xor tmp_136_i_fu_1142_p4);
    tmp_30_4_4_i_fu_1460_p2 <= (tmp_22_4_i_fu_1310_p2 xor tmp_137_i_fu_1152_p4);
    tmp_30_4_i_fu_1436_p2 <= (tmp_22_4_i_fu_1310_p2 xor tmp_133_i_fu_1112_p4);
    tmp_30_fu_686_p4 <= state(959 downto 896);
    tmp_31_fu_702_p4 <= data(1023 downto 960);
    tmp_32_fu_712_p4 <= state(1023 downto 960);
    tmp_33_fu_728_p4 <= data(1087 downto 1024);
    tmp_34_fu_738_p4 <= state(1087 downto 1024);
    tmp_35_fu_754_p18 <= ((((((((((((((((tmp_15_337_fu_748_p2 & tmp_14_336_fu_722_p2) & tmp_13_335_fu_696_p2) & tmp_12_334_fu_670_p2) & tmp_11_333_fu_644_p2) & tmp_10_332_fu_618_p2) & tmp_s_331_fu_592_p2) & tmp_9_330_fu_566_p2) & tmp_8_329_fu_540_p2) & tmp_7_328_fu_514_p2) & tmp_6_327_fu_488_p2) & tmp_5_326_fu_462_p2) & tmp_4_325_fu_436_p2) & tmp_3_324_fu_410_p2) & tmp_2_323_fu_384_p2) & tmp_1_322_fu_358_p2) & tmp_s_fu_332_p2);
    tmp_36_fu_792_p5 <= (state(1599 downto 1088) & tmp_35_fu_754_p18);
    tmp_37_fu_822_p1 <= state_load_1_reg_289(64 - 1 downto 0);
    tmp_38_fu_1186_p1 <= tmp_12_1_i_fu_958_p2(63 - 1 downto 0);
    tmp_39_0_1_i_fu_1470_p4 <= tmp_30_0_1_i_fu_1322_p2(63 downto 28);
    tmp_39_0_2_i_fu_1484_p4 <= tmp_30_0_2_i_fu_1328_p2(63 downto 61);
    tmp_39_0_3_i_fu_1498_p4 <= tmp_30_0_3_i_fu_1334_p2(63 downto 23);
    tmp_39_0_4_i_fu_1512_p4 <= tmp_30_0_4_i_fu_1340_p2(63 downto 46);
    tmp_39_1_1_i_fu_1538_p4 <= tmp_30_1_1_i_fu_1352_p2(63 downto 20);
    tmp_39_1_2_i_fu_1552_p4 <= tmp_30_1_2_i_fu_1358_p2(63 downto 54);
    tmp_39_1_3_i_fu_1566_p4 <= tmp_30_1_3_i_fu_1364_p2(63 downto 19);
    tmp_39_1_4_i_fu_1580_p4 <= tmp_30_1_4_i_fu_1370_p2(63 downto 62);
    tmp_39_2_1_i_fu_1608_p4 <= tmp_30_2_1_i_fu_1382_p2(63 downto 58);
    tmp_39_2_2_i_fu_1622_p4 <= tmp_30_2_2_i_fu_1388_p2(63 downto 21);
    tmp_39_2_3_i_fu_1636_p4 <= tmp_30_2_3_i_fu_1394_p2(63 downto 49);
    tmp_39_2_4_i_fu_1650_p4 <= tmp_30_2_4_i_fu_1400_p2(63 downto 3);
    tmp_39_2_i_fu_1594_p4 <= tmp_30_2_i_fu_1376_p2(63 downto 2);
    tmp_39_3_1_i_fu_1678_p4 <= tmp_30_3_1_i_fu_1412_p2(63 downto 9);
    tmp_39_3_2_i_fu_1692_p4 <= tmp_30_3_2_i_fu_1418_p2(63 downto 39);
    tmp_39_3_3_i_fu_1706_p4 <= tmp_30_3_3_i_fu_1424_p2(63 downto 43);
    tmp_39_3_4_i_fu_1720_p4 <= tmp_30_3_4_i_fu_1430_p2(63 downto 8);
    tmp_39_3_i_fu_1664_p4 <= tmp_30_3_i_fu_1406_p2(63 downto 36);
    tmp_39_4_1_i_fu_1748_p4 <= tmp_30_4_1_i_fu_1442_p2(63 downto 44);
    tmp_39_4_2_i_fu_1762_p4 <= tmp_30_4_2_i_fu_1448_p2(63 downto 25);
    tmp_39_4_3_i_fu_1776_p4 <= tmp_30_4_3_i_fu_1454_p2(63 downto 56);
    tmp_39_4_4_i_fu_1790_p4 <= tmp_30_4_4_i_fu_1460_p2(63 downto 50);
    tmp_39_4_i_fu_1734_p4 <= tmp_30_4_i_fu_1436_p2(63 downto 37);
    tmp_39_fu_1190_p3 <= tmp_12_1_i_fu_958_p2(63 downto 63);
    tmp_3_324_fu_410_p2 <= (tmp_6_fu_400_p4 xor tmp_3_fu_390_p4);
    tmp_3_fu_390_p4 <= data(255 downto 192);
    tmp_40_fu_1212_p1 <= tmp_12_2_i_fu_1032_p2(63 - 1 downto 0);
    tmp_41_fu_1216_p3 <= tmp_12_2_i_fu_1032_p2(63 downto 63);
    tmp_42_fu_1238_p1 <= tmp_12_3_i_fu_1106_p2(63 - 1 downto 0);
    tmp_43_fu_1242_p3 <= tmp_12_3_i_fu_1106_p2(63 downto 63);
    tmp_44_fu_1264_p1 <= tmp_12_4_i_fu_1180_p2(63 - 1 downto 0);
    tmp_45_fu_1268_p3 <= tmp_12_4_i_fu_1180_p2(63 downto 63);
    tmp_46_fu_1290_p1 <= tmp_12_i_fu_884_p2(63 - 1 downto 0);
    tmp_47_fu_1294_p3 <= tmp_12_i_fu_884_p2(63 downto 63);
    tmp_48_fu_1466_p1 <= tmp_30_0_1_i_fu_1322_p2(28 - 1 downto 0);
    tmp_49_fu_1480_p1 <= tmp_30_0_2_i_fu_1328_p2(61 - 1 downto 0);
    tmp_4_325_fu_436_p2 <= (tmp_10_fu_426_p4 xor tmp_9_fu_416_p4);
    tmp_4_fu_338_p4 <= data(127 downto 64);
    tmp_50_fu_1494_p1 <= tmp_30_0_3_i_fu_1334_p2(23 - 1 downto 0);
    tmp_51_fu_1508_p1 <= tmp_30_0_4_i_fu_1340_p2(46 - 1 downto 0);
    tmp_52_fu_1522_p1 <= tmp_30_1_i_fu_1346_p2(63 - 1 downto 0);
    tmp_53_fu_1526_p3 <= tmp_30_1_i_fu_1346_p2(63 downto 63);
    tmp_54_fu_1534_p1 <= tmp_30_1_1_i_fu_1352_p2(20 - 1 downto 0);
    tmp_55_fu_1548_p1 <= tmp_30_1_2_i_fu_1358_p2(54 - 1 downto 0);
    tmp_56_fu_1562_p1 <= tmp_30_1_3_i_fu_1364_p2(19 - 1 downto 0);
    tmp_57_fu_1576_p1 <= tmp_30_1_4_i_fu_1370_p2(62 - 1 downto 0);
    tmp_58_fu_1590_p1 <= tmp_30_2_i_fu_1376_p2(2 - 1 downto 0);
    tmp_59_fu_1604_p1 <= tmp_30_2_1_i_fu_1382_p2(58 - 1 downto 0);
    tmp_5_326_fu_462_p2 <= (tmp_12_fu_452_p4 xor tmp_11_fu_442_p4);
    tmp_5_fu_348_p4 <= state(127 downto 64);
    tmp_60_fu_1618_p1 <= tmp_30_2_2_i_fu_1388_p2(21 - 1 downto 0);
    tmp_61_fu_1632_p1 <= tmp_30_2_3_i_fu_1394_p2(49 - 1 downto 0);
    tmp_62_fu_1646_p1 <= tmp_30_2_4_i_fu_1400_p2(3 - 1 downto 0);
    tmp_63_fu_1660_p1 <= tmp_30_3_i_fu_1406_p2(36 - 1 downto 0);
    tmp_64_fu_1674_p1 <= tmp_30_3_1_i_fu_1412_p2(9 - 1 downto 0);
    tmp_65_fu_1688_p1 <= tmp_30_3_2_i_fu_1418_p2(39 - 1 downto 0);
    tmp_66_fu_1702_p1 <= tmp_30_3_3_i_fu_1424_p2(43 - 1 downto 0);
    tmp_67_fu_1716_p1 <= tmp_30_3_4_i_fu_1430_p2(8 - 1 downto 0);
    tmp_68_fu_1730_p1 <= tmp_30_4_i_fu_1436_p2(37 - 1 downto 0);
    tmp_69_fu_1744_p1 <= tmp_30_4_1_i_fu_1442_p2(44 - 1 downto 0);
    tmp_6_327_fu_488_p2 <= (tmp_14_fu_478_p4 xor tmp_13_fu_468_p4);
    tmp_6_fu_400_p4 <= state(255 downto 192);
    tmp_70_fu_1758_p1 <= tmp_30_4_2_i_fu_1448_p2(25 - 1 downto 0);
    tmp_71_fu_1772_p1 <= tmp_30_4_3_i_fu_1454_p2(56 - 1 downto 0);
    tmp_72_fu_1786_p1 <= tmp_30_4_4_i_fu_1460_p2(50 - 1 downto 0);
    tmp_73_fu_1908_p1 <= tmp_state_1_chi_fu_315_ap_return(64 - 1 downto 0);
    tmp_7_328_fu_514_p2 <= (tmp_16_fu_504_p4 xor tmp_15_fu_494_p4);
    tmp_7_fu_364_p4 <= data(191 downto 128);
    tmp_8_329_fu_540_p2 <= (tmp_18_fu_530_p4 xor tmp_17_fu_520_p4);
    tmp_8_fu_374_p4 <= state(191 downto 128);
    tmp_9_330_fu_566_p2 <= (tmp_20_fu_556_p4 xor tmp_19_fu_546_p4);
    tmp_9_fu_416_p4 <= data(319 downto 256);
    tmp_fu_1014_p2 <= (tmp_123_i_fu_984_p4 xor tmp_124_i_fu_994_p4);
    tmp_i9_fu_1903_p1 <= std_logic_vector(resize(unsigned(round_reg_301),64));
    tmp_i_fu_1912_p2 <= (tmp_73_fu_1908_p1 xor KeccakRoundConstants_q0);
    tmp_s_331_fu_592_p2 <= (tmp_22_fu_582_p4 xor tmp_21_fu_572_p4);
    tmp_s_fu_332_p2 <= (tmp_2_fu_328_p1 xor tmp_1_fu_320_p1);
    tmp_state_1_chi_fu_315_A_read <= ((((((((((((((((((((((((((((((((((((((((((((((((tmp_57_fu_1576_p1 & tmp_39_1_4_i_fu_1580_p4) & tmp_50_fu_1494_p1) & tmp_39_0_3_i_fu_1498_p4) & tmp_70_fu_1758_p1) & tmp_39_4_2_i_fu_1762_p4) & tmp_64_fu_1674_p1) & tmp_39_3_1_i_fu_1678_p4) & tmp_58_fu_1590_p1) & tmp_39_2_i_fu_1594_p4) & tmp_67_fu_1716_p1) & tmp_39_3_4_i_fu_1720_p4) & tmp_61_fu_1632_p1) & tmp_39_2_3_i_fu_1636_p4) & tmp_55_fu_1548_p1) & tmp_39_1_2_i_fu_1552_p4) & tmp_48_fu_1466_p1) & tmp_39_0_1_i_fu_1470_p4) & tmp_68_fu_1730_p1) & tmp_39_4_i_fu_1734_p4) & tmp_51_fu_1508_p1) & tmp_39_0_4_i_fu_1512_p4) & tmp_71_fu_1772_p1) & tmp_39_4_3_i_fu_1776_p4) & tmp_65_fu_1688_p1) & tmp_39_3_2_i_fu_1692_p4) & tmp_59_fu_1604_p1) & tmp_39_2_1_i_fu_1608_p4) & tmp_52_fu_1522_p1) & tmp_53_fu_1526_p3) & tmp_62_fu_1646_p1) & tmp_39_2_4_i_fu_1650_p4) & tmp_56_fu_1562_p1) & tmp_39_1_3_i_fu_1566_p4) & tmp_49_fu_1480_p1) & tmp_39_0_2_i_fu_1484_p4) & tmp_69_fu_1744_p1) & tmp_39_4_1_i_fu_1748_p4) & tmp_63_fu_1660_p1) & tmp_39_3_i_fu_1664_p4) & tmp_72_fu_1786_p1) & tmp_39_4_4_i_fu_1790_p4) & tmp_66_fu_1702_p1) & tmp_39_3_3_i_fu_1706_p4) & tmp_60_fu_1618_p1) & tmp_39_2_2_i_fu_1622_p4) & tmp_54_fu_1534_p1) & tmp_39_1_1_i_fu_1538_p4) & tmp_30_0_i_fu_1316_p2);
    tmp_state_2_fu_1918_p5 <= (tmp_state_1_chi_fu_315_ap_return(1599 downto 64) & tmp_i_fu_1912_p2);
end behav;
