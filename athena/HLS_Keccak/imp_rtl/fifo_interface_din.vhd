-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.1
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fifo_interface_din is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    din_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    din_empty_n : IN STD_LOGIC;
    din_read : OUT STD_LOGIC;
    msg_din : OUT STD_LOGIC_VECTOR (1087 downto 0);
    msg_full_n : IN STD_LOGIC;
    msg_write : OUT STD_LOGIC;
    size : OUT STD_LOGIC_VECTOR (31 downto 0);
    last : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of fifo_interface_din is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fifo_interface_din,hls_ip_2014_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx485tffg1761-2,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.048000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_440 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010001000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_43F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000111111";
    constant ap_const_lv32_FFFFFBC0 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111101111000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal state : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal sgt_words : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sgt_size : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal is_eom : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal msg_reg : STD_LOGIC_VECTOR (1087 downto
    signal count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sgt_words_loc_phi_fu_114_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_65 : BOOLEAN;
    signal tmp_3_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal msg_reg_loc_phi_fu_123_p4 : STD_LOGIC_VECTOR (1087 downto 0);
    signal tmp_8_fu_200_p3 : STD_LOGIC_VECTOR (1087 downto 0);
    signal storemerge_phi_fu_133_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_326_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_cast_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_344_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal last_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_19_fu_196_p1 : STD_LOGIC_VECTOR (1023 downto 0);
    signal tmp_17_fu_292_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_cast_fu_306_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_9_fu_340_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_200 : BOOLEAN;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_sig_bdd_134 : BOOLEAN;
    signal ap_sig_bdd_229 : BOOLEAN;
    signal ap_sig_bdd_231 : BOOLEAN;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal ap_sig_bdd_194 : BOOLEAN;
    signal ap_sig_bdd_236 : BOOLEAN;
    signal ap_sig_bdd_224 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- last_preg assign process. --
    last_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                last_preg <= ap_const_lv1_0;
            else
                if (ap_sig_bdd_102) then
                    if (not((ap_const_lv1_0 = tmp_13_fu_275_p2))) then 
                        last_preg <= is_eom;
                    elsif ((ap_const_lv1_0 = tmp_13_fu_275_p2)) then 
                        last_preg <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- size_preg assign process. --
    size_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                size_preg <= ap_const_lv32_0;
            else
                if (ap_sig_bdd_102) then
                    if (not((ap_const_lv1_0 = tmp_10_fu_256_p2))) then 
                        size_preg <= ap_const_lv32_440;
                    elsif ((ap_const_lv1_0 = tmp_10_fu_256_p2)) then 
                        size_preg <= sgt_size;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- count assign process. --
    count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_200) then
                if (not((ap_const_lv1_0 = tmp_5_fu_232_p2))) then 
                    count <= ap_const_lv32_0;
                elsif ((ap_const_lv1_0 = tmp_5_fu_232_p2)) then 
                    count <= tmp_11_fu_238_p2;
                end if;
            end if; 
        end if;
    end process;

    -- sgt_size assign process. --
    sgt_size_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_194) then
                if (ap_sig_bdd_233) then 
                    sgt_size <= tmp_4_cast_fu_344_p1;
                elsif (ap_sig_bdd_231) then 
                    sgt_size <= tmp_12_cast_fu_296_p1;
                elsif (ap_sig_bdd_229) then 
                    sgt_size <= storemerge_phi_fu_133_p4;
                end if;
            end if; 
        end if;
    end process;

    -- sgt_words assign process. --
    sgt_words_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_194) then
                if (not((ap_const_lv1_0 = tmp_1_fu_157_p2))) then 
                    sgt_words <= tmp_7_cast_fu_316_p1;
                elsif (ap_sig_bdd_236) then 
                    sgt_words <= tmp_3_fu_215_p2;
                end if;
            end if; 
        end if;
    end process;

    -- state assign process. --
    state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not(ap_sig_bdd_65) and not((ap_const_lv1_0 = tmp_fu_151_p2)))) then 
                state(0) <= '1';
                state(1) <= '0';
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and not((ap_const_lv1_0 = tmp_1_fu_157_p2)) and not(ap_sig_bdd_65) and not((ap_const_lv1_0 = tmp_7_fu_326_p3)))) then 
                state(0) <= '0';
                state(1) <= '1';
            elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and not((ap_const_lv1_0 = tmp_s_fu_173_p2)) and not(ap_sig_bdd_65)) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and not((ap_const_lv1_0 = tmp_1_fu_157_p2)) and not(ap_sig_bdd_65) and (ap_const_lv1_0 = tmp_7_fu_326_p3)))) then 
                state(0) <= '1';
                state(1) <= '1';
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and not((ap_const_lv1_0 = tmp_5_fu_232_p2)) and not(ap_sig_bdd_65) and not((ap_const_lv1_0 = tmp_13_fu_275_p2)))) then 
                state(0) <= '0';
                state(1) <= '0';
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and not((ap_const_lv1_0 = tmp_1_fu_157_p2)) and not(ap_sig_bdd_65))) then
                is_eom <= din_dout(63 downto 63);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and (ap_const_lv1_0 = tmp_6_fu_185_p2) and not(ap_sig_bdd_65))) then
                msg_reg <= tmp_8_fu_200_p3;
            end if;
        end if;
    end process;
    state(3 downto 2) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm , ap_sig_bdd_65)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm, tmp_fu_151_p2, tmp_1_fu_157_p2, tmp_s_fu_173_p2, tmp_4_fu_179_p2, tmp_5_fu_232_p2, ap_sig_bdd_65)
    begin
                ap_sig_bdd_102 <= ((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and not((ap_const_lv1_0 = tmp_5_fu_232_p2)) and not(ap_sig_bdd_65));
    end process;


    -- ap_sig_bdd_134 assign process. --
    ap_sig_bdd_134_assign_proc : process(ap_CS_fsm, tmp_fu_151_p2, tmp_1_fu_157_p2, tmp_s_fu_173_p2, tmp_4_fu_179_p2)
    begin
                ap_sig_bdd_134 <= ((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)));
    end process;


    -- ap_sig_bdd_194 assign process. --
    ap_sig_bdd_194_assign_proc : process(ap_CS_fsm, tmp_fu_151_p2, ap_sig_bdd_65)
    begin
                ap_sig_bdd_194 <= ((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and not(ap_sig_bdd_65));
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(ap_CS_fsm, tmp_fu_151_p2, tmp_1_fu_157_p2, tmp_s_fu_173_p2, tmp_4_fu_179_p2, ap_sig_bdd_65)
    begin
                ap_sig_bdd_200 <= ((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and not(ap_sig_bdd_65));
    end process;


    -- ap_sig_bdd_224 assign process. --
    ap_sig_bdd_224_assign_proc : process(ap_CS_fsm, tmp_fu_151_p2, tmp_1_fu_157_p2, tmp_s_fu_173_p2, tmp_4_fu_179_p2, tmp_5_fu_232_p2)
    begin
                ap_sig_bdd_224 <= ((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and not((ap_const_lv1_0 = tmp_5_fu_232_p2)));
    end process;


    -- ap_sig_bdd_229 assign process. --
    ap_sig_bdd_229_assign_proc : process(tmp_1_fu_157_p2, tmp_s_fu_173_p2, tmp_4_fu_179_p2, tmp_5_fu_232_p2)
    begin
                ap_sig_bdd_229 <= ((ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and not((ap_const_lv1_0 = tmp_5_fu_232_p2)));
    end process;


    -- ap_sig_bdd_231 assign process. --
    ap_sig_bdd_231_assign_proc : process(tmp_1_fu_157_p2, tmp_s_fu_173_p2)
    begin
                ap_sig_bdd_231 <= ((ap_const_lv1_0 = tmp_1_fu_157_p2) and not((ap_const_lv1_0 = tmp_s_fu_173_p2)));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(tmp_1_fu_157_p2, tmp_7_fu_326_p3)
    begin
                ap_sig_bdd_233 <= (not((ap_const_lv1_0 = tmp_1_fu_157_p2)) and (ap_const_lv1_0 = tmp_7_fu_326_p3));
    end process;


    -- ap_sig_bdd_236 assign process. --
    ap_sig_bdd_236_assign_proc : process(tmp_1_fu_157_p2, tmp_s_fu_173_p2, tmp_4_fu_179_p2, tmp_6_fu_185_p2)
    begin
                ap_sig_bdd_236 <= ((ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and (ap_const_lv1_0 = tmp_6_fu_185_p2));
    end process;


    -- ap_sig_bdd_65 assign process. --
    ap_sig_bdd_65_assign_proc : process(din_empty_n, msg_full_n, tmp_fu_151_p2, tmp_1_fu_157_p2, tmp_s_fu_173_p2, tmp_4_fu_179_p2, tmp_6_fu_185_p2, tmp_5_fu_232_p2)
    begin
                ap_sig_bdd_65 <= (((din_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and (ap_const_lv1_0 = tmp_6_fu_185_p2)) or ((ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and (msg_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_5_fu_232_p2))) or ((din_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and not((ap_const_lv1_0 = tmp_s_fu_173_p2))) or ((din_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = tmp_fu_151_p2) and not((ap_const_lv1_0 = tmp_1_fu_157_p2))));
    end process;


    -- din_read assign process. --
    din_read_assign_proc : process(ap_CS_fsm, tmp_fu_151_p2, tmp_1_fu_157_p2, tmp_s_fu_173_p2, tmp_4_fu_179_p2, tmp_6_fu_185_p2, ap_sig_bdd_65)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and (ap_const_lv1_0 = tmp_6_fu_185_p2) and not(ap_sig_bdd_65)) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and not((ap_const_lv1_0 = tmp_s_fu_173_p2)) and not(ap_sig_bdd_65)) or ((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and not((ap_const_lv1_0 = tmp_1_fu_157_p2)) and not(ap_sig_bdd_65)))) then 
            din_read <= ap_const_logic_1;
        else 
            din_read <= ap_const_logic_0;
        end if; 
    end process;


    -- last assign process. --
    last_assign_proc : process(is_eom, tmp_13_fu_275_p2, last_preg, ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then
            if (not((ap_const_lv1_0 = tmp_13_fu_275_p2))) then 
                last <= is_eom;
            elsif ((ap_const_lv1_0 = tmp_13_fu_275_p2)) then 
                last <= ap_const_lv1_0;
            else 
                last <= last_preg;
            end if;
        else 
            last <= last_preg;
        end if; 
    end process;

    msg_din <= msg_reg_loc_phi_fu_123_p4;

    -- msg_reg_loc_phi_fu_123_p4 assign process. --
    msg_reg_loc_phi_fu_123_p4_assign_proc : process(msg_reg, tmp_6_fu_185_p2, tmp_8_fu_200_p3, ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then
            if ((ap_const_lv1_0 = tmp_6_fu_185_p2)) then 
                msg_reg_loc_phi_fu_123_p4 <= tmp_8_fu_200_p3;
            elsif (not((ap_const_lv1_0 = tmp_6_fu_185_p2))) then 
                msg_reg_loc_phi_fu_123_p4 <= msg_reg;
            else 
                msg_reg_loc_phi_fu_123_p
            end if;
        else 
            msg_reg_loc_phi_fu_123_p
        end if; 
    end process;


    -- msg_write assign process. --
    msg_write_assign_proc : process(ap_CS_fsm, tmp_fu_151_p2, tmp_1_fu_157_p2, tmp_s_fu_173_p2, tmp_4_fu_179_p2, tmp_5_fu_232_p2, ap_sig_bdd_65)
    begin
        if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and (ap_const_lv1_0 = tmp_fu_151_p2) and (ap_const_lv1_0 = tmp_1_fu_157_p2) and (ap_const_lv1_0 = tmp_s_fu_173_p2) and not((ap_const_lv1_0 = tmp_4_fu_179_p2)) and not((ap_const_lv1_0 = tmp_5_fu_232_p2)) and not(ap_sig_bdd_65))) then 
            msg_write <= ap_const_logic_1;
        else 
            msg_write <= ap_const_logic_0;
        end if; 
    end process;


    -- sgt_words_loc_phi_fu_114_p4 assign process. --
    sgt_words_loc_phi_fu_114_p4_assign_proc : process(sgt_words, tmp_6_fu_185_p2, tmp_3_fu_215_p2, ap_sig_bdd_134)
    begin
        if (ap_sig_bdd_134) then
            if ((ap_const_lv1_0 = tmp_6_fu_185_p2)) then 
                sgt_words_loc_phi_fu_114_p4 <= tmp_3_fu_215_p2;
            elsif (not((ap_const_lv1_0 = tmp_6_fu_185_p2))) then 
                sgt_words_loc_phi_fu_114_p4 <= sgt_words;
            else 
                sgt_words_loc_phi_fu_114_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            sgt_words_loc_phi_fu_114_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- size assign process. --
    size_assign_proc : process(sgt_size, tmp_10_fu_256_p2, size_preg, ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then
            if (not((ap_const_lv1_0 = tmp_10_fu_256_p2))) then 
                size <= ap_const_lv32_440;
            elsif ((ap_const_lv1_0 = tmp_10_fu_256_p2)) then 
                size <= sgt_size;
            else 
                size <= size_preg;
            end if;
        else 
            size <= size_preg;
        end if; 
    end process;


    -- storemerge_phi_fu_133_p4 assign process. --
    storemerge_phi_fu_133_p4_assign_proc : process(tmp_10_fu_256_p2, tmp_12_fu_262_p2, ap_sig_bdd_224)
    begin
        if (ap_sig_bdd_224) then
            if (not((ap_const_lv1_0 = tmp_10_fu_256_p2))) then 
                storemerge_phi_fu_133_p4 <= tmp_12_fu_262_p2;
            elsif ((ap_const_lv1_0 = tmp_10_fu_256_p2)) then 
                storemerge_phi_fu_133_p4 <= ap_const_lv32_0;
            else 
                storemerge_phi_fu_133_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            storemerge_phi_fu_133_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_10_fu_256_p2 <= "1" when (unsigned(sgt_size) > unsigned(ap_const_lv32_43F)) else "0";
    tmp_11_fu_238_p2 <= std_logic_vector(unsigned(count) + unsigned(ap_const_lv32_1));
    tmp_12_cast_fu_296_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_292_p1),32));
    tmp_12_fu_262_p2 <= std_logic_vector(unsigned(sgt_size) + unsigned(ap_const_lv32_FFFFFBC0));
    tmp_13_fu_275_p2 <= "1" when (sgt_words_loc_phi_fu_114_p4 = ap_const_lv32_0) else "0";
    tmp_17_fu_292_p1 <= din_dout(31 - 1 downto 0);
    tmp_19_fu_196_p1 <= msg_reg(1024 - 1 downto 0);
    tmp_1_fu_157_p2 <= "1" when (state = ap_const_lv4_1) else "0";
    tmp_3_fu_215_p2 <= std_logic_vector(unsigned(sgt_words) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_4_cast_fu_344_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_340_p1),32));
    tmp_4_fu_179_p2 <= "1" when (state = ap_const_lv4_3) else "0";
    tmp_5_fu_232_p2 <= "1" when (count = ap_const_lv32_10) else "0";
    tmp_6_cast_fu_306_p4 <= din_dout(36 downto 6);
    tmp_6_fu_185_p2 <= "1" when (sgt_words = ap_const_lv32_0) else "0";
    tmp_7_cast_fu_316_p1 <= std_logic_vector(resize(unsigned(tmp_6_cast_fu_306_p4),32));
    tmp_7_fu_326_p3 <= din_dout(63 downto 63);
    tmp_8_fu_200_p3 <= (tmp_19_fu_196_p1 & din_dout);
    tmp_9_fu_340_p1 <= din_dout(31 - 1 downto 0);
    tmp_fu_151_p2 <= "1" when (state = ap_const_lv4_0) else "0";
    tmp_s_fu_173_p2 <= "1" when (state = ap_const_lv4_2) else "0";
end behav;
